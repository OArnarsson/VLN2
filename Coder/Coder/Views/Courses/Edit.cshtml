@model Coder.Models.ViewModels.CourseViewModel

@{
    ViewBag.Title = "Edit";

    var enumList = new List<SelectListItem>();
    foreach (var value in Enum.GetValues(typeof(Coder.Models.Entity.CoderRole)))
    {
        enumList.Add(new SelectListItem
        {
            Text = value.ToString(),
            Value = ((int)value).ToString()
        });
    }
}

@section breadcrumbs {
    <ul>
        <li>@Html.ActionLink("Coder", "Index", "Home")</li>
        <li>@Html.ActionLink("Courses", "Index", "Courses")</li>
        <li>@Html.ActionLink(Model.Name, "Details", "Courses", new { Id = Model.CourseId }, null)</li>
        <li>@Html.ActionLink("Edit", "Create", "Courses", new { Id = Model.CourseId }, null)</li>
    </ul>
}

@section heading {
    <h1>Edit - @Model.Name</h1>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="whiteBox box">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.CourseId)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control codertiny" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Start, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.End, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.End, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.End, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ApplicationUsers, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <table>
                        <thead>
                            <tr>
                                <td>Course</td>
                                <td>Role</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model.ApplicationUsers)
                            {
                                enumList.ForEach(x => x.Selected = Model.UserCourses.Any(j => j.UserId == user.Id) &&
                                                                   (int.Parse(x.Value) == ((int)Model.UserCourses.FirstOrDefault(j => j.UserId == user.Id).CoderRole)));
                                <tr>
                                    <td>@user.Name</td>
                                    <td>@Html.DropDownList(("User_" + user.Id), enumList, "---")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="form-group text-center">
                <div class="col-md-12">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
}
<a href=@Url.Action("Details", "Courses", new { id = Model.CourseId })><i class="fa fa-arrow-left"></i></a>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
