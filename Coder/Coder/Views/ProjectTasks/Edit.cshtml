@model Coder.Models.Entity.ProjectTask

@{
    ViewBag.Title = "Edit";
}

@section heading {
    <h1>Edit - @Model.Name</h1>
}

@section breadcrumbs {
    <ul>
        <li>@Html.ActionLink("Coder", "Index", "Home")</li>
        <li>@Html.ActionLink("Courses", "Index", "Courses")</li>
        <li>@Html.ActionLink(Model.Project.Course.Name, "Details", "Courses", new { Id = Model.Project.Course.Id }, null)</li>
        <li>@Html.ActionLink(Model.Project.Name, "Details", "Projects", new { Id = Model.Project.Id }, null)</li>
        <li>@Html.ActionLink(Model.Name, "Details", "ProjectTasks", new { Id = Model.Id }, null)</li>
        <li>@Html.ActionLink("Edit", "Edit", "ProjectTasks", new { Id = Model.Id }, null)</li>
    </ul>
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "taskForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="whiteBox box">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control codertiny" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @step = "1", @type = "number", @min = "0", @max = "100", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProjectId, "Project", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ProjectId, null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2" for="files">Files</label>
                <div class="col-md-10">
                    @{
                        var required = "";
                        if (Model.FilesRequired != null) {
                            required = string.Join(", ", from f in Model.FilesRequired select f.Name);
                        }
                    }
                    <input class="form-control text-box single-line" id="files" placeholder="Filenames seperated by ," type="text" name="files" value="@required" />
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaxGroupSize, "Max group size", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MaxGroupSize, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MaxGroupSize, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="tests">
            @{
                int counter = 1;
                foreach (var test in Model.TaskTests)
                {
                    <div class="test clearfix whiteBox">
                        <h3>Test @counter</h3>
                        <a class="btn btn-danger remove-test" href="#"><i class="fa fa-trash" aria-hidden="true"></i>Remove test</a>
                        <div class="tests-wrap row">
                            <div class="input-wrap col-sm-6">
                                <p>Input</p>
                                <div class="editor input">@test.Input</div>
                            </div>
                            <div class="output-wrap col-sm-6">
                                <p>Output</p>
                                <div class="editor output">@test.Output</div>
                            </div>
                        </div>
                    </div>
                    counter = counter + 1;
                }
            }
        </div>

        <a class="btn btn-default" id="newTest" href="#"><i class="fa fa-plus"></i>Add test</a>

        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
                }

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/scripts/ace/ace.js")
}
