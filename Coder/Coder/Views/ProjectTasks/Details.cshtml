@model Coder.Models.Entity.ProjectTask
@using Microsoft.AspNet.Identity
@using Coder.Models.Entity
@using Coder.Helpers
@{
    ViewBag.Title = @Html.Raw(Model.Name);
    CommentsHelper commentsHelper = new CommentsHelper();
}

@section heading {
    <h1>@Model.Name (@Html.DisplayFor(model => model.Value)%)</h1>
}

@section breadcrumbs {
    <ul>
        <li>@Html.ActionLink("Coder", "Index", "Home")</li>
        <li>@Html.ActionLink("Courses", "Index", "Courses")</li>
        <li>@Html.ActionLink(Model.Project.Course.Name, "Details", "Courses", new { Id = Model.Project.Course.Id }, null)</li>
        <li>@Html.ActionLink(Model.Project.Name, "Details", "Projects", new { Id = Model.Project.Id }, null)</li>
        <li>@Html.ActionLink(Model.Name, "Details", "ProjectTasks", new { Id = Model.Id }, null)</li>
    </ul>
}

<div class="whiteBox">
        @if (User.IsInRole("Administrator") || ViewBag.IsTeacher == true)
        {
            <a class="btn btn-default" href=@Url.Action("Edit", "ProjectTasks", new { id = Model.Id })><i class="fa fa-pencil"></i>Edit task</a>
            <a class="btn btn-default" href=@Url.Action("Delete", "ProjectTasks", new { id = Model.Id })><i class="fa fa-trash"></i>Delete task</a>
            <a class="btn btn-default" href=@Url.Action("Grade", "ProjectTasks", new { id = Model.Id })><i class="fa fa-pencil"></i>Give grades</a>
        }
        <dl class="coder-dl">
            <dt>Course:</dt>
            <dd>@Html.ActionLink(@Model.Project.Course.Name, "Details", "Courses", new { id = Model.Project.Course.Id }, null)</dd>
            <dt>Project:</dt>
            <dd>@Html.ActionLink(@Model.Project.Name, "Details", "Projects", new { id = Model.Project.Id }, null)</dd>
            <dt>Percentage of project:</dt>
            <dd>@Model.Value %</dd>
            @{
                var best = (Coder.Models.Entity.Submission)ViewBag.BestSubmission;
                if (best != null)
                {
                    <dt>Your best submission:</dt>
                    <dd>@Html.ActionLink("Submission " + best.Id, "Details", "Submissions", new { Id = best.Id }, null)</dd>
                }
            }
            
        </dl>
</div>
<div class="title-box">
    <div class="title-box-title">
        <h3>Description</h3>
    </div>
    <div class="title-box-content">
        @Html.Raw(Model.Description)
    </div>
</div>

<div id="task-tests" class="title-box">
    <div class="title-box-title">
        <h3>Tests</h3>
    </div>
    <div class="title-box-content">
        @{
            if (Model.TaskTests.Count > 0)
            {
                int counter = 1;
                foreach (var test in Model.TaskTests)
                {
                    <div class="test">
                        <h4>Test @counter</h4>
                        <div class="tests-wrap row">
                            <div class="input-wrap col-sm-6">
                                <p>Input</p>
                                <div class="editor input readonly">@test.Input</div>
                            </div>
                            <div class="output-wrap col-sm-6">
                                <p>Output</p>
                                <div class="editor output readonly">@test.Output</div>
                            </div>
                        </div>
                    </div>
                    counter = counter + 1;
                }
            }
            else
            {
                <div class="alert alert-info">No tests available at this time.</div>
            }
        }
    </div>
</div>
<div id="task-handin" class="title-box">
    <div class="title-box-title">
        <h3>Handin</h3>
    </div>
    <div class="title-box-content">
        <div class="upload-area">
            <div class="handin-files">
                <p>Files required:</p>
                <ul>
                    @foreach (var i in Model.FilesRequired)
                    {
                        <li>@i.Name</li>
                    }
                </ul>
            </div>
            @if (Model.MaxGroupSize > 1)
            {
                <div class="handin-members">
                    <p>Group members:</p>

                    @for (int i = 1; i < Model.MaxGroupSize; i++)
                    {
                        <select class="form-control user-select" name="user_@i">
                            <option value="">---</option>
                            @foreach (var user in (List<Coder.Models.ApplicationUser>)ViewBag.AllUsers)
                            {
                                <option value="@user.Id">
                                    @user.Name
                                </option>
                            }
                        </select>
                    }
                </div>
            }
            <div id="taskFiles" class="coderDropzone"></div>
            <a class="btn btn-primary" href="#" id="submitTask">Submit task</a>
        </div>
    </div>
</div>

<div class="title-box">
    <div class="title-box-title">
        <h3>Submissions</h3>
    </div>
    <div class="title-box-content">
        <table class="coder-table coder-datatable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>Users</th>
                    <th>Status</th>
                    <th>More info</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Coder.Models.Entity.Submission s in Model.Submissions.Where(i => i.ApplicationUsers.Any(j => j.Id == User.Identity.GetUserId())).OrderByDescending(i => i.Id)) // TODO: Only current user
            {
                    <tr>
                        <td>@Html.ActionLink(s.Id.ToString(), "Details", "Submissions", new { id = s.Id }, null)</td>
                        <td>@s.Created</td>
                        <td>
                            @string.Join(", ", (from u in s.ApplicationUsers select u.Name))
                        </td>
                        <td>@s.Status</td>

                        <td><a href=@Url.Action("Details", "Submissions", new { id = s.Id }, null)><i class="fa fa-info-circle"></i></a></td>

                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<div class="title-box">
    <div class="title-box-title">
        <h3>Comments</h3>
    </div>
    <div class="title-box-content">
        <div id="comments">
            @Html.Partial("~/Views/Comments/Comments.cshtml", commentsHelper.CommentViewModelsFromComments(Model.Comments.ToList(), User.IsInRole("Administrator"), User.Identity.GetUserId()))
        </div>
        @Html.Partial("~/Views/Comments/Create.cshtml", new Comment { ProjectTaskId = Model.Id })
    </div>
</div>


@{
    var allfiles = "";
    foreach (var f in Model.FilesRequired)
    {
        allfiles += f.Name + ",";
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/dropzonescripts")
    <script>
        $(document).ready(function () {
            Dropzone.autoDiscover = false;
            var myDropzone = new Dropzone("#taskFiles", {
                url: "/ProjectTasks/SaveUploadedFile?Id=" + @Model.Id,
                autoProcessQueue: false,
                createImageThumbnails: false,
                addRemoveLinks: true,
                parallelUploads: 100,
                uploadMultiple: true
            });

            myDropzone.on("errormultiple", function (data, errorMessage, xhr) {
                $('#submissionStatus').html('<div class="alert alert-danger">Something went wrong... Did you upload the correct files?</div>');
            });

            myDropzone.on("processingmultiple", function (data) {
                $('#submissionStatus').html('');
            });

            myDropzone.on("sendingmultiple", function (file, xhr, formData) {
                $.each($('.user-select'), function(key, value) {
                    formData.append($(value).attr('name'), $(value).val());
                });
            });

            myDropzone.on("successmultiple", function (data) {
                location.reload(); // TODO: Use ajax to get the new item and add it to the table.
            });

            $('#submitTask').click(function (e) {
                myDropzone.processQueue();
                e.preventDefault();
            });

            var updateComments = function(comments) {
                $('.comments-table tbody','#comments').empty();
                $.each(comments, function(i, item) {
                    if (item.CanDelete) {
                        $('.comments-table tbody','#comments').append($('<tr><td>' + item.Name + '</td><td>' + item.Text + '</td><td>' + item.Created + '</td><td><a href="/Comments/Delete/' + item.Id + '"><i class="fa fa-trash"></i></a></td></tr>'));
                    }
                    else {
                        $('.comments-table tbody','#comments').append($('<tr><td>' + item.Name + '</td><td>' + item.Text + '</td><td>' + item.Created + '</td><td></td></tr>'));
                    }
                });
            }

            $('#commentForm').on('submit', function () {
                var form = $(this);
                console.log("submitting");
                $.ajax({
                    type: 'POST',
                    url: '/Comments/Create',
                    data: form.serialize(),
                    dataType: 'json',
                    method: 'POST',
                    success: function (json) {
                        updateComments(json);
                        $('#comment-input').val('');
                    },
                    error: function(request, status, error) {
                        console.log("Ajax error on when submitting comment");
                    }
                });
                return false;
            });

            $("#comments").on("click", 'a[href*="/Comments/Delete"]', function (e) {
                console.log($(this).href);
                $.ajax({
                    type: 'POST',
                    url: $(this).attr('href'),
                    dataType: 'json',
                    method: 'POST',
                    success: function(json) {
                        updateComments(json);
                    },
                    error: function(request, status, error) {
                        console.log("Ajax error when deleting comment");
                    }
                });

                e.preventDefault();
            });
        });
    </script>

    @Scripts.Render("~/scripts/ace/ace.js")
}
